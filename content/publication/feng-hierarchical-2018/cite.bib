@inproceedings{feng_hierarchical_2018,
 abstract = {Understanding the dynamic behavior of a software system is one of the most important and time-consuming tasks for today's software maintainers. In practice, understanding the inner workings of software requires studying the source code and documentation and inserting logging code in order to map high-level descriptions of the program behavior with low-level implementation, i.e., the source code. Unfortunately, for large codebases and large log files, such cognitive mapping can be quite challenging. To bridge the cognitive gap between the source code and detailed models of program behavior, we propose a fully automatic approach to present a semantic abstraction with different levels of functional granularity from full execution traces. Our approach builds multi-level abstractions and identifies frequent behaviors at each level based on a number of execution traces, and then, it labels phases within individual execution traces according to the identified major functional behaviors of the system. To validate our approach, we conducted a case study on a large-scale subject program, Javac, to demonstrate the effectiveness of the mining result. Furthermore, the results of a user study demonstrate that our approach is capable of presenting users a high-level comprehensible abstraction of execution behavior. Based on a real world subject program the participants in our user study were able to achieve a mean accuracy of 70%.},
 address = {New York, NY, USA},
 author = {Feng, Yang and Dreef, Kaj and Jones, James A. and van Deursen, Arie},
 booktitle = {Proceedings of the 26th Conference on Program Comprehension},
 doi = {10.1145/3196321.3196343},
 isbn = {978-1-4503-5714-2},
 month = {May},
 pages = {86--96},
 publisher = {Association for Computing Machinery},
 series = {ICPC '18},
 title = {Hierarchical abstraction of execution traces for program comprehension},
 url = {https://doi.org/10.1145/3196321.3196343},
 urldate = {2023-09-05},
 year = {2018}
}

